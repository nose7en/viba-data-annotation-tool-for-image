#!/bin/bash

# VIBA Image Annotation Tool - CI Build and Push Script
# 用于在 Mac 上使用 Colima/Buildx 构建 Linux 镜像并推送到 ECR

set -e

# 配置
AWS_REGION="us-west-2"
ECR_REGISTRY="686255979277.dkr.ecr.us-west-2.amazonaws.com"
BACKEND_REPO="internal/annot-image-backend"
FRONTEND_REPO="internal/annot-image-frontend"
PLATFORM="linux/amd64"  # AWS EKS 使用的平台

# 获取当前时间戳作为标签
TIMESTAMP=$(date +%Y%m%d-%H%M%S)
GIT_COMMIT=$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")
TAG="${TIMESTAMP}-${GIT_COMMIT}"

echo "🚀 Building VIBA Image Annotation Tool images for ${PLATFORM}..."
echo "📦 Tag: ${TAG}"

# 确保使用 colima docker context（如果可用）
if docker context ls | grep -q "colima"; then
    echo "🔧 Using colima Docker context..."
    docker context use colima
fi

# 检查 Docker buildx 是否可用
if ! docker buildx version >/dev/null 2>&1; then
    echo "❌ Docker buildx is not available. Please install Docker Desktop or enable buildx."
    echo "💡 Run: ./scripts/setup-buildx.sh"
    exit 1
fi

# 检查是否有合适的 builder
if ! docker buildx ls | grep -q "multiarch"; then
    echo "🔧 Creating multiarch builder..."
    docker buildx create --name multiarch --driver docker-container --bootstrap --use
else
    echo "✅ Using existing multiarch builder"
    docker buildx use multiarch
fi

# 登录到 ECR
echo "🔐 Logging in to ECR..."
aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REGISTRY}

# 确保 ECR 仓库存在
echo "🏗️  Ensuring ECR repositories exist..."
aws ecr describe-repositories --repository-names ${BACKEND_REPO} --region ${AWS_REGION} >/dev/null 2>&1 || {
    echo "   Creating backend repository..."
    aws ecr create-repository --repository-name ${BACKEND_REPO} --region ${AWS_REGION}
}

aws ecr describe-repositories --repository-names ${FRONTEND_REPO} --region ${AWS_REGION} >/dev/null 2>&1 || {
    echo "   Creating frontend repository..."
    aws ecr create-repository --repository-name ${FRONTEND_REPO} --region ${AWS_REGION}
}

# 构建并推送后端镜像
echo "🔨 Building and pushing backend image..."
docker buildx build \
    --platform ${PLATFORM} \
    --file Dockerfile.backend \
    --tag ${ECR_REGISTRY}/${BACKEND_REPO}:${TAG} \
    --tag ${ECR_REGISTRY}/${BACKEND_REPO}:latest \
    --push \
    .

# 构建并推送前端镜像
echo "🔨 Building and pushing frontend image..."
docker buildx build \
    --platform ${PLATFORM} \
    --file Dockerfile.frontend \
    --tag ${ECR_REGISTRY}/${FRONTEND_REPO}:${TAG} \
    --tag ${ECR_REGISTRY}/${FRONTEND_REPO}:latest \
    --push \
    .

echo "✅ Build and push completed successfully!"
echo "📋 Image Details:"
echo "   Backend: ${ECR_REGISTRY}/${BACKEND_REPO}:${TAG}"
echo "   Frontend: ${ECR_REGISTRY}/${FRONTEND_REPO}:${TAG}"

# 生成部署信息文件
echo "📝 Generating deployment info..."
cat > ./deployment-info.env << EOF
# Generated by CI build on $(date)
BACKEND_IMAGE=${ECR_REGISTRY}/${BACKEND_REPO}:${TAG}
FRONTEND_IMAGE=${ECR_REGISTRY}/${FRONTEND_REPO}:${TAG}
BUILD_TAG=${TAG}
BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
GIT_COMMIT=${GIT_COMMIT}
EOF

echo "✅ Deployment info saved to deployment-info.env"
echo ""
echo "🚀 Ready for deployment! Run:"
echo "   ./scripts/cd-deploy.sh"
